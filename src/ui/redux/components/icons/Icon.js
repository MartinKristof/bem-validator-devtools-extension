/* eslint-disable */
// Generated by gulp svg-icon - do not modify manually

import Radium from 'radium';

import React, { PureComponent as Component } from 'react';
import PropTypes from 'prop-types';

const iconList = ['invalid', 'loader', 'valid', 'unknown', 'error'];

class Icon extends Component {
  static propTypes = {
    className: PropTypes.string,
    height: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
    width: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
    kind: PropTypes.oneOf(['invalid', 'loader', 'valid', 'unknown', 'error']).isRequired,
    onClick: PropTypes.func,
    preview: PropTypes.bool,
    size: PropTypes.number,
    style: PropTypes.oneOfType([PropTypes.array, PropTypes.object]),
    wrapperStyle: PropTypes.oneOfType([PropTypes.array, PropTypes.object]),
  };

  static defaultProps = {
    size: 64,
  };

  render() {
    const { kind, preview } = this.props;

    return preview ? this.renderPreview() : this.renderIcon(kind);
  }

  renderPreview() {
    return <div>{iconList.map((kind) => this.renderPreviewKind(kind))}</div>;
  }

  renderIcon(kind) {
    const { wrapperStyle } = this.props;

    if (wrapperStyle) return <div style={wrapperStyle}>{this.getIcon(kind)}</div>;

    return this.getIcon(kind);
  }

  renderPreviewKind(kind) {
    return (
      <div key={kind}>
        <h3>&lt;Icon kind="{kind}" /&gt;</h3>
        {this.renderIcon(kind)}
      </div>
    );
  }

  getIcon(kind) {
    const { height, onClick, size, style, width, className, ...rest } = this.props;

    switch (kind) {
      default:
        return null;
      case 'invalid':
        return (
          <svg
            {...rest}
            height={height || size}
            width={width || size}
            onClick={onClick}
            style={style}
            className={className}
            viewBox="0 0 130.2 130.2"
          >
            <circle
              className="path circle"
              fill="none"
              stroke="#D06079"
              strokeWidth="6"
              strokeMiterlimit="10"
              cx="65.1"
              cy="65.1"
              r="62.1"
            />
            <path
              className="path line"
              fill="none"
              stroke="#D06079"
              strokeWidth="6"
              strokeLinecap="round"
              strokeMiterlimit="10"
              d="M34.4 37.9l61.4 54.4M95.8 38L34.4 92.2"
            />
          </svg>
        );
      case 'loader':
        return (
          <svg
            {...rest}
            height={height || size}
            width={width || size}
            onClick={onClick}
            style={style}
            className={className}
            viewBox="0 0 50 50"
          >
            <path d="M25.251 6.461c-10.318 0-18.683 8.365-18.683 18.683h4.068c0-8.071 6.543-14.615 14.615-14.615V6.461z">
              <animateTransform
                attributeType="xml"
                attributeName="transform"
                type="rotate"
                from="0 25 25"
                to="360 25 25"
                dur="0.6s"
                repeatCount="indefinite"
              />
            </path>
          </svg>
        );
      case 'valid':
        return (
          <svg
            {...rest}
            height={height || size}
            width={width || size}
            onClick={onClick}
            style={style}
            className={className}
            viewBox="0 0 130.2 130.2"
          >
            <circle
              className="path circle"
              fill="none"
              stroke="#73AF55"
              strokeWidth="6"
              strokeMiterlimit="10"
              cx="65.1"
              cy="65.1"
              r="62.1"
            />
            <path
              className="path check"
              fill="none"
              stroke="#73AF55"
              strokeWidth="6"
              strokeLinecap="round"
              strokeMiterlimit="10"
              d="M100.2 40.2L51.5 88.8 29.8 67.5"
            />
          </svg>
        );
      case 'unknown':
        return (
          <svg
            {...rest}
            height={height || size}
            width={width || size}
            onClick={onClick}
            style={style}
            className={className}
            viewBox="0 0 130.2 130.2"
          >
            <circle
              className="path circle"
              fill="none"
              stroke="#857F7F"
              strokeWidth="6"
              strokeMiterlimit="10"
              cx="65.1"
              cy="65.1"
              r="62.1"
            />
            <text fill="none" fontSize="64px" stroke="#857F7F" strokeWidth="6" x="49.1" y="85.1">
              ?
            </text>
          </svg>
        );
      case 'error':
        return (
          <svg
            {...rest}
            height={height || size}
            width={width || size}
            onClick={onClick}
            style={style}
            className={className}
            viewBox="0 0 130.2 130.2"
          >
            <circle
              className="path circle"
              fill="none"
              stroke="#857F7F"
              strokeWidth="6"
              strokeMiterlimit="10"
              cx="65.1"
              cy="65.1"
              r="62.1"
            />
            <text fill="none" fontSize="64px" stroke="#857F7F" strokeWidth="6" x="57.1" y="85.1">
              !
            </text>
          </svg>
        );
    }
  }
}

export default Radium(Icon);
